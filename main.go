package main

import (
	"flag"
	"fmt"

	_ "github.com/Jason-CKY/telegram-reminderbot/docs" // docs is generated by Swag CLI, you have to import it.
	echoSwagger "github.com/swaggo/echo-swagger"

	"github.com/Jason-CKY/telegram-reminderbot/pkg/core"
	"github.com/Jason-CKY/telegram-reminderbot/pkg/handlers"
	"github.com/Jason-CKY/telegram-reminderbot/pkg/schemas"
	"github.com/Jason-CKY/telegram-reminderbot/pkg/utils"
	"github.com/go-playground/validator/v10"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	log "github.com/sirupsen/logrus"
)

// @title telegram reminderbot
// @version 1.0
// @description This is a sample server for using Swagger with Echo.
// @host localhost:8080
// @BasePath /api/v1
func main() {
	// Load environment variables from .env file
	err := godotenv.Load()

	if err != nil {
		log.Infof("Error loading .env file: %v\nUsing environment variables instead...", err)
	}

	flag.StringVar(&core.LogLevel, "log-level", utils.LookupEnvOrString("LOG_LEVEL", core.LogLevel), "Logging level for the server")
	flag.StringVar(&core.DirectusHost, "fpath", utils.LookupEnvOrString("DIRECTUS_HOST", core.DirectusHost), "Hostname for directus server")
	flag.IntVar(&core.WebPort, "port", utils.LookupEnvOrInt("PORT", core.WebPort), "Port for echo web server")
	
	flag.Parse()

	// setup logrus
	log.SetReportCaller(true)
	log.SetFormatter(&log.TextFormatter{
		FullTimestamp:          true,
		DisableLevelTruncation: true,
	})
	logLevel, _ := log.ParseLevel(core.LogLevel)
	log.SetLevel(logLevel)

	log.Infof("connecting to directus at: %v", core.DirectusHost)

	schemas.Validator = validator.New(validator.WithRequiredStructEnabled())
	e := echo.New()
	e.Static("/static", "static")
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	
	
	
	// JSON API routes
	e.GET("/api/v1/tasks", handlers.GetAllTasks)
	e.GET("/api/v1/task/:id", handlers.GetTaskById)
	e.POST("/api/v1/task", handlers.CreateTask)
	e.DELETE("/api/v1/task/:id", handlers.DeleteTaskById)
	e.PUT("/api/v1/task/:id", handlers.UpdateTaskById)

	e.Logger.Fatal(e.Start(fmt.Sprintf(":%v", core.WebPort)))
}
